#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_PLAYLISTS 10
#define MAX_SONGS 100
#define MAX_USERS 10
struct Song {
char title[100];
char artist[100];
char album[100];
int duration; // Duration in seconds
};
struct Playlist {
char name[100];
struct Song songs[MAX_SONGS];
int song_count;
};
struct User {
char username[100];
char password[100];
struct Playlist playlists[MAX_PLAYLISTS];
int playlist_count;
};
int song_count = 0;
struct Song songs[MAX_SONGS];
int compare_songs(const void *a, const void *b) {
return strcmp(((struct Song *)a)->title, ((struct Song *)b)->title);
}
void add_song() {
if (song_count >= MAX_SONGS) {
printf("Song limit reached!\n");
return;
}
struct Song new_song;
printf("Enter song title: ");
scanf(" %[^\n]s", new_song.title);
printf("Enter artist name: ");
scanf(" %[^\n]s", new_song.artist);
printf("Enter album name: ");
scanf(" %[^\n]s", new_song.album);
// Error handling for duration input
int duration;
printf("Enter duration (in seconds): ");
if (scanf("%d", &duration) != 1 || duration < 0) {
printf("Invalid duration! Please enter a positive number.\n");
while(getchar() != '\n'); // Clear input buffer
return;
}
new_song.duration = duration;
songs[song_count++] = new_song;
// Sort songs after adding a new song
qsort(songs, song_count, sizeof(struct Song), compare_songs);
printf("Song added successfully!\n");
}
int binary_search(struct Song songs[], int size, const char *target) {
int left = 0, right = size - 1;
while (left <= right) {
int mid = left + (right - left) / 2;
int cmp = strcmp(songs[mid].title, target);
if (cmp == 0) {
return mid; // Found
} else if (cmp < 0) {
left = mid + 1;
} else {
right = mid - 1;
}
}
return -1; // Not found
}
void search_song() {
char target[100];
printf("Enter song title to search: ");
scanf(" %[^\n]s", target);
int index = binary_search(songs, song_count, target);
if (index != -1) {
printf("Found: %s by %s from album %s, Duration: %d seconds\n",
songs[index].title, songs[index].artist, songs[index].album, songs[index].duration);
} else {
printf("Song not found.\n");
}
}
void display_songs() {
if (song_count == 0) {
printf("No songs available.\n");
return;
}
printf("\n--- List of Songs ---\n");
for (int i = 0; i < song_count; i++) {
printf("%d. %s by %s (Album: %s, Duration: %d seconds)\n",
i + 1, songs[i].title, songs[i].artist, songs[i].album, songs[i].duration);
}
}
void display_menu() {
printf("\n--- Spotify Clone Menu ---\n");
printf("1. Add Song\n");
printf("2. Search for a Song\n");
printf("3. Display All Songs\n");
printf("4. Exit\n");
}
int main() {
int choice;
while (1) {
display_menu();
printf("Enter your choice: ");
if (scanf("%d", &choice) != 1) {
printf("Invalid input! Please enter a number.\n");
while(getchar() != '\n'); // Clear input buffer
continue;
}
switch (choice) {
case 1:
add_song();
break;
case 2:
search_song();
break;
case 3:
display_songs();
break;
case 4:
printf("Exiting...\n");
return 0; // Gracefully exit the program
default:
printf("Invalid choice! Please try again.\n");
}
}
return 0;
}
